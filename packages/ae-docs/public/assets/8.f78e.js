(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{"./packages/ae-docs/pages/lingo.mdx":function(e,a,n){"use strict";n.r(a),n.d(a,"default",function(){return g});var t=n("./node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"),o=n("./node_modules/@babel/runtime/helpers/esm/classCallCheck.js"),s=n("./node_modules/@babel/runtime/helpers/esm/createClass.js"),m=n("./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js"),r=n("./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js"),p=n("./node_modules/@babel/runtime/helpers/esm/inherits.js"),c=n("./node_modules/react/index.js"),l=n.n(c),i=n("./node_modules/@mdx-js/tag/dist/index.js"),g=function(e){function a(e){var n;return Object(o.a)(this,a),(n=Object(m.a)(this,Object(r.a)(a).call(this,e))).layout=null,n}return Object(p.a)(a,e),Object(s.a)(a,[{key:"render",value:function(){var e=this.props,a=e.components;Object(t.a)(e,["components"]);return l.a.createElement(i.MDXTag,{name:"wrapper",components:a},l.a.createElement(i.MDXTag,{name:"h1",components:a,props:{id:"the-street-lingo"}},"The street lingo"),l.a.createElement(i.MDXTag,{name:"p",components:a},"Ya need to kno da lingo to be talkin wid us yo. So letz getya up to speed."),l.a.createElement(i.MDXTag,{name:"hr",components:a}),l.a.createElement(i.MDXTag,{name:"h2",components:a,props:{id:"program"}},"Program"),l.a.createElement(i.MDXTag,{name:"p",components:a},"A program is a pure, cancellable generator that calls at least one operation. This is where all your core logic exists free from the implementation details. All effects by design have a consistent api so dont worry about any of the outside world."),l.a.createElement(i.MDXTag,{name:"pre",components:a},l.a.createElement(i.MDXTag,{name:"code",components:a,parentName:"pre",props:{className:"hljs language-js"}},l.a.createElement(i.MDXTag,{name:"span",components:a,parentName:"code",props:{className:"hljs-comment"}},"// program :: Program<IOEffect, ConsoleEffect> String ()"),"\n",l.a.createElement(i.MDXTag,{name:"span",components:a,parentName:"code",props:{className:"hljs-keyword"}},"const")," program = ",l.a.createElement(i.MDXTag,{name:"span",components:a,parentName:"code",props:{className:"hljs-function"}},l.a.createElement(i.MDXTag,{name:"span",components:a,parentName:"span",props:{className:"hljs-keyword"}},"function")," *(",l.a.createElement(i.MDXTag,{name:"span",components:a,parentName:"span",props:{className:"hljs-params"}},"greetText"),") "),"{\n  ",l.a.createElement(i.MDXTag,{name:"span",components:a,parentName:"code",props:{className:"hljs-keyword"}},"const")," name = ",l.a.createElement(i.MDXTag,{name:"span",components:a,parentName:"code",props:{className:"hljs-keyword"}},"yield")," IOEffect.getInput(",l.a.createElement(i.MDXTag,{name:"span",components:a,parentName:"code",props:{className:"hljs-string"}},"'What is your name?'"),");\n  ",l.a.createElement(i.MDXTag,{name:"span",components:a,parentName:"code",props:{className:"hljs-keyword"}},"yield")," ConsoleEffect.log(",l.a.createElement(i.MDXTag,{name:"span",components:a,parentName:"code",props:{className:"hljs-string"}},"'>> Name'"),", name);\n  ",l.a.createElement(i.MDXTag,{name:"span",components:a,parentName:"code",props:{className:"hljs-keyword"}},"yield")," IOEffect.showMessage(",l.a.createElement(i.MDXTag,{name:"span",components:a,parentName:"code",props:{className:"hljs-string"}},"`Hello, ",l.a.createElement(i.MDXTag,{name:"span",components:a,parentName:"span",props:{className:"hljs-subst"}},"${name}"),"! ",l.a.createElement(i.MDXTag,{name:"span",components:a,parentName:"span",props:{className:"hljs-subst"}},"${greetText}"),"`"),");\n};")),l.a.createElement(i.MDXTag,{name:"h2",components:a,props:{id:"operation"}},"Operation"),l.a.createElement(i.MDXTag,{name:"p",components:a},"An operation is basically something to do. An operation is technically just an instruction with no behavior implementation. So you can use an operation in your program without worrying about anything other than the operation signature.\nIn the above example ",l.a.createElement(i.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"IOEffect.getInput"),", ",l.a.createElement(i.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"ConsoleEffect.log")," and ",l.a.createElement(i.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"IOEffect.showMessage")," are operations being run."),l.a.createElement(i.MDXTag,{name:"h2",components:a,props:{id:"effect"}},"Effect"),l.a.createElement(i.MDXTag,{name:"p",components:a},"An effect is a group of operations signatures. You can create your own custom effects using ",l.a.createElement(i.MDXTag,{name:"a",components:a,parentName:"p",props:{href:"#core.createeffect"}},l.a.createElement(i.MDXTag,{name:"inlineCode",components:a,parentName:"a"},"createEffect")),".\nIn the above example ",l.a.createElement(i.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"IOEffect")," and ",l.a.createElement(i.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"ConsoleEffect")," are effects. This package comes with a few built in effects like State, Exception, Random, etc."),l.a.createElement(i.MDXTag,{name:"pre",components:a},l.a.createElement(i.MDXTag,{name:"code",components:a,parentName:"pre",props:{className:"hljs language-js"}},l.a.createElement(i.MDXTag,{name:"span",components:a,parentName:"code",props:{className:"hljs-keyword"}},"const")," IOEffect = createEffect(",l.a.createElement(i.MDXTag,{name:"span",components:a,parentName:"code",props:{className:"hljs-string"}},"'IOEffect'"),", {\n  ",l.a.createElement(i.MDXTag,{name:"span",components:a,parentName:"code",props:{className:"hljs-attr"}},"getInput"),": func([",l.a.createElement(i.MDXTag,{name:"span",components:a,parentName:"code",props:{className:"hljs-string"}},"'question'"),"], ",l.a.createElement(i.MDXTag,{name:"span",components:a,parentName:"code",props:{className:"hljs-string"}},"'name'"),"),\n  ",l.a.createElement(i.MDXTag,{name:"span",components:a,parentName:"code",props:{className:"hljs-attr"}},"showMessage"),": func([",l.a.createElement(i.MDXTag,{name:"span",components:a,parentName:"code",props:{className:"hljs-string"}},"'message'"),"]),\n});")),l.a.createElement(i.MDXTag,{name:"h2",components:a,props:{id:"operation-signature"}},"Operation signature"),l.a.createElement(i.MDXTag,{name:"p",components:a},"An operation signature is effectively a function signature but for effects. It is used to document the signature of an operation which allows the program to then use the operation as if it were the real side-effects. To define a function signature, you can use the ",l.a.createElement(i.MDXTag,{name:"a",components:a,parentName:"p",props:{href:"#core.func"}},l.a.createElement(i.MDXTag,{name:"inlineCode",components:a,parentName:"a"},"func"))," function. In the example above, you can see ",l.a.createElement(i.MDXTag,{name:"inlineCode",components:a,parentName:"p"},"func(['question'], 'name')")," which is describing the input(s) and output of the operation."),l.a.createElement(i.MDXTag,{name:"h2",components:a,props:{id:"operation-behaviorimplementation"}},"Operation behavior/implementation"),l.a.createElement(i.MDXTag,{name:"p",components:a},"A operation behavior is a set of curried functions that decides how the program flows when the given operation is called."),l.a.createElement(i.MDXTag,{name:"pre",components:a},l.a.createElement(i.MDXTag,{name:"code",components:a,parentName:"pre",props:{className:"hljs language-js"}},l.a.createElement(i.MDXTag,{name:"span",components:a,parentName:"code",props:{className:"hljs-comment"}},"// IOEffect :: Effect"),"\n\n",l.a.createElement(i.MDXTag,{name:"span",components:a,parentName:"code",props:{className:"hljs-keyword"}},"const")," io = IOEffect.handler({\n  ",l.a.createElement(i.MDXTag,{name:"span",components:a,parentName:"code",props:{className:"hljs-comment"}},"// getInput, showMessage :: OpBehavior (String) ()"),"\n  getInput: ",l.a.createElement(i.MDXTag,{name:"span",components:a,parentName:"code",props:{className:"hljs-function"}},"(",l.a.createElement(i.MDXTag,{name:"span",components:a,parentName:"span",props:{className:"hljs-params"}},"{ resume }"),") =>")," label => showModal({ label, ",l.a.createElement(i.MDXTag,{name:"span",components:a,parentName:"code",props:{className:"hljs-attr"}},"onSubmit"),": resume }),\n  ",l.a.createElement(i.MDXTag,{name:"span",components:a,parentName:"code",props:{className:"hljs-attr"}},"showMessage"),": ",l.a.createElement(i.MDXTag,{name:"span",components:a,parentName:"code",props:{className:"hljs-function"}},"(",l.a.createElement(i.MDXTag,{name:"span",components:a,parentName:"span",props:{className:"hljs-params"}},"{ resume }"),") =>")," message => {\n    renderMessage(message);\n    resume();\n  },\n});")),l.a.createElement(i.MDXTag,{name:"h2",components:a,props:{id:"effect-handler"}},"Effect handler"),l.a.createElement(i.MDXTag,{name:"p",components:a},l.a.createElement(i.MDXTag,{name:"inlineCode",components:a,parentName:"p"},".handler")," method call returns a handler instance. You can use this to call your program and/or compose with other effect handlers."),l.a.createElement(i.MDXTag,{name:"pre",components:a},l.a.createElement(i.MDXTag,{name:"code",components:a,parentName:"pre",props:{className:"hljs language-js"}},l.a.createElement(i.MDXTag,{name:"span",components:a,parentName:"code",props:{className:"hljs-comment"}},"// io :: Handler"),"\nio.run(program, ",l.a.createElement(i.MDXTag,{name:"span",components:a,parentName:"code",props:{className:"hljs-string"}},"'Hello world'"),"); ",l.a.createElement(i.MDXTag,{name:"span",components:a,parentName:"code",props:{className:"hljs-comment"}},"// Program, ...arguments"))),l.a.createElement(i.MDXTag,{name:"h2",components:a,props:{id:"mutli-modemultiple-continuations-mode"}},"Mutli mode/Multiple continuations mode"),l.a.createElement(i.MDXTag,{name:"p",components:a},l.a.createElement(i.MDXTag,{name:"inlineCode",components:a,parentName:"p"},".runMulti")," runs your program in multi mode allowing you to call resume function synchronously multiple times."),l.a.createElement(i.MDXTag,{name:"p",components:a},l.a.createElement(i.MDXTag,{name:"a",components:a,parentName:"p",props:{href:"#core.multiple-continuations"}},"Read more about it")),l.a.createElement(i.MDXTag,{name:"pre",components:a},l.a.createElement(i.MDXTag,{name:"code",components:a,parentName:"pre",props:{className:"hljs language-js"}},l.a.createElement(i.MDXTag,{name:"span",components:a,parentName:"code",props:{className:"hljs-comment"}},"// io :: Handler"),"\nio.runMulti(program, ",l.a.createElement(i.MDXTag,{name:"span",components:a,parentName:"code",props:{className:"hljs-string"}},"'Hello world'"),"); ",l.a.createElement(i.MDXTag,{name:"span",components:a,parentName:"code",props:{className:"hljs-comment"}},"// Program, ...arguments"))))}}]),a}(l.a.Component)}}]);